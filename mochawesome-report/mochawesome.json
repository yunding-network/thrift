{
  "stats": {
    "suites": 7,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-05T04:20:09.009Z",
    "end": "2017-05-05T04:20:09.276Z",
    "duration": 267,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Thrift Client Test",
        "suites": [],
        "tests": [
          {
            "title": "Client create",
            "fullTitle": "Thrift Client Test Client create",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nshould.exist(client);\nclient.host.should.be.equal(option.host);\nclient.port.should.be.equal(option.port);\nshould.exist(client.opts);\nclient.thrift_gen_path.should.be.equal(option.thrift_gen);\nclient.services_path[serviceName].should.be.equal(service_path);\nclient.types_path[typeName].should.be.equal(type_path);\nshould.exist(client.transport);\nshould.exist(client.protocol);\nshould.exist(client.multiplexer);\nshould.exist(client.services);\nshould.not.exist(client.connection);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_INITED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "09f7529a-1abc-4651-a5a8-05757c9458df",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create common connect",
            "fullTitle": "Thrift Client Test Client create common connect",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "47f295d9-0c03-4b94-acfd-4e7c4c706c3b",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create http connect",
            "fullTitle": "Thrift Client Test Client create http connect",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nshould.exist(client.connection.nodeOptions);\nclient.connection.nodeOptions.host.should.be.equal(option.host);\nclient.connection.nodeOptions.port.should.be.equal(option.port);\nclient.connection.nodeOptions.path.should.be.equal(option.nodeOptions.path);\nclient.connection.nodeOptions.method.should.be.equal('POST');\nshould.exist(client.connection.nodeOptions.headers);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "efbf29a8-fb24-4ba3-a675-be83c1fb0607",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create ws connect",
            "fullTitle": "Thrift Client Test Client create ws connect",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.connection.path.should.be.equal(option.path);\nshould.exist(client.connection.wsOptions);\nclient.connection.wsOptions.host.should.be.equal(option.host);\nclient.connection.wsOptions.port.should.be.equal(option.port);\nclient.connection.wsOptions.path.should.be.equal(option.path);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "a4bd0aff-c168-45a1-883f-1f3444ff5663",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create service",
            "fullTitle": "Thrift Client Test Client create service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.not.exist(client.services[serviceName]);\nvar service = client.getService(serviceName);\nshould.exist(service);\nshould.exist(client.services[serviceName]);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "b551ffab-e2d4-42f5-8a1b-4c7af3fdf096",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client common invoke add function",
            "fullTitle": "Thrift Client Test Client common invoke add function",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8833775f-4f58-4869-852a-ba86b502d80d",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client http invoke add function",
            "fullTitle": "Thrift Client Test Client http invoke add function",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2f335e13-56ff-4791-9325-b157941c8fe3",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client websocket invoke add function",
            "fullTitle": "Thrift Client Test Client websocket invoke add function",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "40e90652-910d-44e7-84b2-19cf6c81410c",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/client.js",
        "uuid": "c39c2843-98cd-49fc-bc4f-237896cc533e",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/client.js",
        "passes": [
          {
            "title": "Client create",
            "fullTitle": "Thrift Client Test Client create",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nshould.exist(client);\nclient.host.should.be.equal(option.host);\nclient.port.should.be.equal(option.port);\nshould.exist(client.opts);\nclient.thrift_gen_path.should.be.equal(option.thrift_gen);\nclient.services_path[serviceName].should.be.equal(service_path);\nclient.types_path[typeName].should.be.equal(type_path);\nshould.exist(client.transport);\nshould.exist(client.protocol);\nshould.exist(client.multiplexer);\nshould.exist(client.services);\nshould.not.exist(client.connection);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_INITED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "09f7529a-1abc-4651-a5a8-05757c9458df",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create common connect",
            "fullTitle": "Thrift Client Test Client create common connect",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "47f295d9-0c03-4b94-acfd-4e7c4c706c3b",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create http connect",
            "fullTitle": "Thrift Client Test Client create http connect",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nshould.exist(client.connection.nodeOptions);\nclient.connection.nodeOptions.host.should.be.equal(option.host);\nclient.connection.nodeOptions.port.should.be.equal(option.port);\nclient.connection.nodeOptions.path.should.be.equal(option.nodeOptions.path);\nclient.connection.nodeOptions.method.should.be.equal('POST');\nshould.exist(client.connection.nodeOptions.headers);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "efbf29a8-fb24-4ba3-a675-be83c1fb0607",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create ws connect",
            "fullTitle": "Thrift Client Test Client create ws connect",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.connection.path.should.be.equal(option.path);\nshould.exist(client.connection.wsOptions);\nclient.connection.wsOptions.host.should.be.equal(option.host);\nclient.connection.wsOptions.port.should.be.equal(option.port);\nclient.connection.wsOptions.path.should.be.equal(option.path);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "a4bd0aff-c168-45a1-883f-1f3444ff5663",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client create service",
            "fullTitle": "Thrift Client Test Client create service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.not.exist(client.services[serviceName]);\nvar service = client.getService(serviceName);\nshould.exist(service);\nshould.exist(client.services[serviceName]);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "b551ffab-e2d4-42f5-8a1b-4c7af3fdf096",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client common invoke add function",
            "fullTitle": "Thrift Client Test Client common invoke add function",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8833775f-4f58-4869-852a-ba86b502d80d",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client http invoke add function",
            "fullTitle": "Thrift Client Test Client http invoke add function",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2f335e13-56ff-4791-9325-b157941c8fe3",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          },
          {
            "title": "Client websocket invoke add function",
            "fullTitle": "Thrift Client Test Client websocket invoke add function",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "40e90652-910d-44e7-84b2-19cf6c81410c",
            "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 44,
        "rootEmpty": false
      },
      {
        "title": "Thrift Server Test",
        "suites": [],
        "tests": [
          {
            "title": "Server create",
            "fullTitle": "Thrift Server Test Server create",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar service_path = gen_path + serviceName + '.js';\nvar type_path = gen_path + typeName + '_types.js';\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nshould.exist(server);\nserver.port.should.equal(option.port);\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\nshould.not.exist(server.tls);\n\nserver.thrift_gen_path.should.be.equal(option.thrift_gen);\nserver.services_path[serviceName].should.be.equal(service_path);\nserver.types_path[typeName].should.be.equal(type_path);\nshould.exist(server.transport);\nshould.exist(server.protocol);\nshould.exist(server.processor);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "348306fa-9f6c-484f-b2f3-083743df6b91",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Register service",
            "fullTitle": "Thrift Server Test Register service",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(server.processor.services[serviceName]);\nshould.exist(server.processor.services[serviceName]._handler.add);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "aae85eb2-b8bb-47d7-a76c-e927972d644a",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Server start",
            "fullTitle": "Thrift Server Test Server start",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\n\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\nshould.exist(server.server);\nshould.exist(server.server._handle);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "341f5833-419c-49a6-ba1d-3ef5448b0b58",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Server close",
            "fullTitle": "Thrift Server Test Server close",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\nserver.close();\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\nshould.exist(server.server);\nshould.not.exist(server.server._handle);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "2b4ee02b-8174-4aff-96d7-25ade75e3809",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/server.js",
        "uuid": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/server.js",
        "passes": [
          {
            "title": "Server create",
            "fullTitle": "Thrift Server Test Server create",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar service_path = gen_path + serviceName + '.js';\nvar type_path = gen_path + typeName + '_types.js';\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nshould.exist(server);\nserver.port.should.equal(option.port);\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\nshould.not.exist(server.tls);\n\nserver.thrift_gen_path.should.be.equal(option.thrift_gen);\nserver.services_path[serviceName].should.be.equal(service_path);\nserver.types_path[typeName].should.be.equal(type_path);\nshould.exist(server.transport);\nshould.exist(server.protocol);\nshould.exist(server.processor);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "348306fa-9f6c-484f-b2f3-083743df6b91",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Register service",
            "fullTitle": "Thrift Server Test Register service",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(server.processor.services[serviceName]);\nshould.exist(server.processor.services[serviceName]._handler.add);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "aae85eb2-b8bb-47d7-a76c-e927972d644a",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Server start",
            "fullTitle": "Thrift Server Test Server start",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\n\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\nshould.exist(server.server);\nshould.exist(server.server._handle);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "341f5833-419c-49a6-ba1d-3ef5448b0b58",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          },
          {
            "title": "Server close",
            "fullTitle": "Thrift Server Test Server close",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\nserver.close();\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\nshould.exist(server.server);\nshould.not.exist(server.server._handle);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "2b4ee02b-8174-4aff-96d7-25ade75e3809",
            "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2,
        "rootEmpty": false
      },
      {
        "title": "Thrift Client With Zookeeper",
        "suites": [],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zclient.js",
        "uuid": "9bb8724d-5f67-4c68-a3bb-b953415399aa",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zclient.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": false,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Thrift Server With Zookeeper In Common Connect Test",
        "suites": [],
        "tests": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zcs = ZCommonServer.create();\n\t\tzcs.initZookeeper(zkOption);\n\t\tzcs.initConnection(serverOption);\n\t\tzcs.registerService(serviceName, {\n\t      add: function(num1, num2, cb){\n\t        return cb(null, num1+num2);\n\t      }\n\t    });\n\n\t    should.exist(zcs.services[serviceName].add);\n    zcs.start(function(){\n      getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n        should.not.exist(gnErr);\n        should.exist(data);\n        should.exist(state);\n        getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n          should.not.exist(gnErr2);\n          should.exist(data);\n          JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.COMMON);\n          should.exist(state);\n          return next();\n        })\n      });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d3bff140-2ae7-4030-af50-cd7a3f9d29bc",
            "parentUUID": "e21b7f50-16f4-4663-9b48-b2aa3f58d0a0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zcserver.js",
        "uuid": "e21b7f50-16f4-4663-9b48-b2aa3f58d0a0",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zcserver.js",
        "passes": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zcs = ZCommonServer.create();\n\t\tzcs.initZookeeper(zkOption);\n\t\tzcs.initConnection(serverOption);\n\t\tzcs.registerService(serviceName, {\n\t      add: function(num1, num2, cb){\n\t        return cb(null, num1+num2);\n\t      }\n\t    });\n\n\t    should.exist(zcs.services[serviceName].add);\n    zcs.start(function(){\n      getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n        should.not.exist(gnErr);\n        should.exist(data);\n        should.exist(state);\n        getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n          should.not.exist(gnErr2);\n          should.exist(data);\n          JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.COMMON);\n          should.exist(state);\n          return next();\n        })\n      });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d3bff140-2ae7-4030-af50-cd7a3f9d29bc",
            "parentUUID": "e21b7f50-16f4-4663-9b48-b2aa3f58d0a0",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 16,
        "rootEmpty": false
      },
      {
        "title": "Thrift Server With Zookeeper In Common Connect Test",
        "suites": [],
        "tests": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zhs = ZHttpServer.create();\nzhs.initZookeeper(zkOption);\nzhs.initConnection(serverOption);\nzhs.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zhs.services[serviceName].add);\nzhs.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.HTTP);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c13408e-cd97-463f-b3db-37c5625c9cdc",
            "parentUUID": "f5535875-f6cc-4497-b3eb-90f27bf25c9e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zhserver.js",
        "uuid": "f5535875-f6cc-4497-b3eb-90f27bf25c9e",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zhserver.js",
        "passes": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zhs = ZHttpServer.create();\nzhs.initZookeeper(zkOption);\nzhs.initConnection(serverOption);\nzhs.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zhs.services[serviceName].add);\nzhs.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.HTTP);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c13408e-cd97-463f-b3db-37c5625c9cdc",
            "parentUUID": "f5535875-f6cc-4497-b3eb-90f27bf25c9e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6,
        "rootEmpty": false
      },
      {
        "title": "Zookeeper Client Test",
        "suites": [],
        "tests": [
          {
            "title": "zookeeper client create",
            "fullTitle": "Zookeeper Client Test zookeeper client create",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nshould.exist(zk);\nzk.hosts.should.be.equal(options.hosts);\nzk.timeout.should.be.equal(options.timeout);\nzk.debug_level.should.be.equal(options.debug_level);\nshould.not.exist(zk.host_order);\nshould.not.exist(zk.isBuffer);\nshould.exist(zk.zk);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "7432e452-429b-4047-b6dd-e4ec80b6fb70",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add persistent node",
            "fullTitle": "Zookeeper Client Test zookeeper client add persistent node",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a3164c8-a2b8-4a7a-b26f-07d8fb6aa6f1",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add ephemeral node",
            "fullTitle": "Zookeeper Client Test zookeeper client add ephemeral node",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createEphemeralNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b09545d4-938d-49a3-b6f9-006ac7abb43e",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add child node",
            "fullTitle": "Zookeeper Client Test zookeeper client add child node",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tgetNodeChild_Protogenesis(options, nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t})\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d1238397-125d-445e-b2a4-44066fb6b1e1",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client get node value",
            "fullTitle": "Zookeeper Client Test zookeeper client get node value",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gvErr, value, state){\n\t\tshould.not.exist(gvErr);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\treturn next();\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8fd12b6a-a6cf-43f2-9c1e-c5990e340883",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client get node child",
            "fullTitle": "Zookeeper Client Test zookeeper client get node child",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "92438032-0c26-4c1a-9961-0369c71cdacb",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client set node value",
            "fullTitle": "Zookeeper Client Test zookeeper client set node value",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, 1, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 2, state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tshould.exist(state2);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError2, v2){\n\t\t\t\tshould.not.exist(gnvError2);\n\t\t\t\tparseInt(v2).should.be.equal(2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f850b67c-3b18-44c6-9129-29c4b84eca63",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client remove node",
            "fullTitle": "Zookeeper Client Test zookeeper client remove node",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tzk.removeNode(nodePath, function(rnErr){\n\t\t\tshould.not.exist(rnErr);\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t})\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6f453683-1eed-44d7-96d9-07da1543ce84",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client exist node",
            "fullTitle": "Zookeeper Client Test zookeeper client exist node",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.existNode(nodePath, function(esErr, state){\n\t\tshould.not.exist(esErr);\n\t\tshould.exist(state);\n\t\treturn next();\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "801f6020-995c-4d58-bb16-290d72301580",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch node update twice",
            "fullTitle": "Zookeeper Client Test zookeeper client watch node update twice",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tvar times = 0;\n\tzk.on('set', function(updatePath){\n\t\tupdatePath.should.be.equal(nodePath);\n\t\ttimes++;\n\t\tif(times == 2) return next();\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\t\t\tshould.not.exist(gnvError);\n\t\t\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\t\t\tshould.not.exist(setError);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9d92ecc4-6dc5-4716-b638-fc45b17dbd3b",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch node delete",
            "fullTitle": "Zookeeper Client Test zookeeper client watch node delete",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tzk.on('delete', function(deletePath){\n\t\tdeletePath.should.be.equal(nodePath);\n\t\tzk.getNodeValue(nodePath, function(err){\n\t\t\terr.code.should.be.equal(-101);\n\t\t\treturn next();\n\t\t});\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.removeNode(nodePath, state1.version, function(delError){\n\t\t\tshould.not.exist(delError);\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3e901454-4165-4328-a7fa-b129497757f2",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch add child node",
            "fullTitle": "Zookeeper Client Test zookeeper client watch add child node",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addChildWatcher(nodePath);\n\tzk.on('child', function(updatePath){\n\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\tshould.not.exist(gncError);\n\t\t\tif(childrens.indexOf(child1) != -1) return next();\n\t\t});\n\t});\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "57d1926a-4b9b-47cb-ad15-b8913949506e",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zookeeper.js",
        "uuid": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zookeeper.js",
        "passes": [
          {
            "title": "zookeeper client create",
            "fullTitle": "Zookeeper Client Test zookeeper client create",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nshould.exist(zk);\nzk.hosts.should.be.equal(options.hosts);\nzk.timeout.should.be.equal(options.timeout);\nzk.debug_level.should.be.equal(options.debug_level);\nshould.not.exist(zk.host_order);\nshould.not.exist(zk.isBuffer);\nshould.exist(zk.zk);\nreturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "7432e452-429b-4047-b6dd-e4ec80b6fb70",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add persistent node",
            "fullTitle": "Zookeeper Client Test zookeeper client add persistent node",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a3164c8-a2b8-4a7a-b26f-07d8fb6aa6f1",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add ephemeral node",
            "fullTitle": "Zookeeper Client Test zookeeper client add ephemeral node",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createEphemeralNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b09545d4-938d-49a3-b6f9-006ac7abb43e",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client add child node",
            "fullTitle": "Zookeeper Client Test zookeeper client add child node",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tgetNodeChild_Protogenesis(options, nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t})\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d1238397-125d-445e-b2a4-44066fb6b1e1",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client get node value",
            "fullTitle": "Zookeeper Client Test zookeeper client get node value",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gvErr, value, state){\n\t\tshould.not.exist(gvErr);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\treturn next();\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8fd12b6a-a6cf-43f2-9c1e-c5990e340883",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client get node child",
            "fullTitle": "Zookeeper Client Test zookeeper client get node child",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "92438032-0c26-4c1a-9961-0369c71cdacb",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client set node value",
            "fullTitle": "Zookeeper Client Test zookeeper client set node value",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, 1, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 2, state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tshould.exist(state2);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError2, v2){\n\t\t\t\tshould.not.exist(gnvError2);\n\t\t\t\tparseInt(v2).should.be.equal(2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f850b67c-3b18-44c6-9129-29c4b84eca63",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client remove node",
            "fullTitle": "Zookeeper Client Test zookeeper client remove node",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tzk.removeNode(nodePath, function(rnErr){\n\t\t\tshould.not.exist(rnErr);\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t})\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6f453683-1eed-44d7-96d9-07da1543ce84",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client exist node",
            "fullTitle": "Zookeeper Client Test zookeeper client exist node",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.existNode(nodePath, function(esErr, state){\n\t\tshould.not.exist(esErr);\n\t\tshould.exist(state);\n\t\treturn next();\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "801f6020-995c-4d58-bb16-290d72301580",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch node update twice",
            "fullTitle": "Zookeeper Client Test zookeeper client watch node update twice",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tvar times = 0;\n\tzk.on('set', function(updatePath){\n\t\tupdatePath.should.be.equal(nodePath);\n\t\ttimes++;\n\t\tif(times == 2) return next();\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\t\t\tshould.not.exist(gnvError);\n\t\t\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\t\t\tshould.not.exist(setError);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9d92ecc4-6dc5-4716-b638-fc45b17dbd3b",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch node delete",
            "fullTitle": "Zookeeper Client Test zookeeper client watch node delete",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tzk.on('delete', function(deletePath){\n\t\tdeletePath.should.be.equal(nodePath);\n\t\tzk.getNodeValue(nodePath, function(err){\n\t\t\terr.code.should.be.equal(-101);\n\t\t\treturn next();\n\t\t});\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.removeNode(nodePath, state1.version, function(delError){\n\t\t\tshould.not.exist(delError);\n\t\t});\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3e901454-4165-4328-a7fa-b129497757f2",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          },
          {
            "title": "zookeeper client watch add child node",
            "fullTitle": "Zookeeper Client Test zookeeper client watch add child node",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addChildWatcher(nodePath);\n\tzk.on('child', function(updatePath){\n\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\tshould.not.exist(gncError);\n\t\t\tif(childrens.indexOf(child1) != -1) return next();\n\t\t});\n\t});\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t});\n});",
            "err": {},
            "isRoot": false,
            "uuid": "57d1926a-4b9b-47cb-ad15-b8913949506e",
            "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 12,
        "totalPasses": 12,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 47,
        "rootEmpty": false
      },
      {
        "title": "Thrift Server With Zookeeper In Common Connect Test",
        "suites": [],
        "tests": [
          {
            "title": "Server create",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server create",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tshould.exist(zs);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "f353f8a7-28e5-4805-a76b-66df80a19f29",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server init zookeeper",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init zookeeper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tshould.exist(zs.zookeeperOpts);\n\t\tshould.exist(zs.zookeeper);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "8e075d11-c5cd-444e-ba35-de9890329d68",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server init connection",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init connection",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\t\tshould.exist(zs.connectionOpts);\n\t\tshould.exist(zs.connection);\n\t\tshould.exist(zs.services);\n\t\tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "246e94f7-f2b2-47a5-8548-033a46fc1274",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server start",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server start",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \treturn next();\n\t    });",
            "err": {},
            "isRoot": false,
            "uuid": "97ab8a98-ef7b-41cc-b91b-1b9635c46aeb",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server close",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server close",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \tzs.close();\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\n\t    \treturn next();\n\t    });",
            "err": {},
            "isRoot": false,
            "uuid": "70a25fe1-ca3f-478b-bd1e-31daa0cac856",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zserver.js",
        "uuid": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zserver.js",
        "passes": [
          {
            "title": "Server create",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server create",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tshould.exist(zs);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "f353f8a7-28e5-4805-a76b-66df80a19f29",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server init zookeeper",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init zookeeper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tshould.exist(zs.zookeeperOpts);\n\t\tshould.exist(zs.zookeeper);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "8e075d11-c5cd-444e-ba35-de9890329d68",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server init connection",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init connection",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\t\tshould.exist(zs.connectionOpts);\n\t\tshould.exist(zs.connection);\n\t\tshould.exist(zs.services);\n\t\tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\n\t\treturn next();",
            "err": {},
            "isRoot": false,
            "uuid": "246e94f7-f2b2-47a5-8548-033a46fc1274",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server start",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server start",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \treturn next();\n\t    });",
            "err": {},
            "isRoot": false,
            "uuid": "97ab8a98-ef7b-41cc-b91b-1b9635c46aeb",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          },
          {
            "title": "Server close",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server close",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \tzs.close();\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\n\t    \treturn next();\n\t    });",
            "err": {},
            "isRoot": false,
            "uuid": "70a25fe1-ca3f-478b-bd1e-31daa0cac856",
            "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5,
        "rootEmpty": false
      },
      {
        "title": "Thrift Server With Zookeeper In Common Connect Test",
        "suites": [],
        "tests": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zwss = ZWSServer.create();\nzwss.initZookeeper(zkOption);\nzwss.initConnection(serverOption);\nzwss.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zwss.services[serviceName].add);\nzwss.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.WEB_SOCKET);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "59d1594f-5805-4de3-b72c-1fce81832d6e",
            "parentUUID": "17c454bd-2bbf-4144-9a7c-8b2b3c9b631a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/zwsserver.js",
        "uuid": "17c454bd-2bbf-4144-9a7c-8b2b3c9b631a",
        "fullFile": "/Users/linan/Documents/DDing_GitHub/thrift/test/zwsserver.js",
        "passes": [
          {
            "title": "Server register service",
            "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "zwss = ZWSServer.create();\nzwss.initZookeeper(zkOption);\nzwss.initConnection(serverOption);\nzwss.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zwss.services[serviceName].add);\nzwss.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.WEB_SOCKET);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "59d1594f-5805-4de3-b72c-1fce81832d6e",
            "parentUUID": "17c454bd-2bbf-4144-9a7c-8b2b3c9b631a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0abed2dc-39fa-450d-b4c3-17b01be057d1",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Client create",
      "fullTitle": "Thrift Client Test Client create",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nshould.exist(client);\nclient.host.should.be.equal(option.host);\nclient.port.should.be.equal(option.port);\nshould.exist(client.opts);\nclient.thrift_gen_path.should.be.equal(option.thrift_gen);\nclient.services_path[serviceName].should.be.equal(service_path);\nclient.types_path[typeName].should.be.equal(type_path);\nshould.exist(client.transport);\nshould.exist(client.protocol);\nshould.exist(client.multiplexer);\nshould.exist(client.services);\nshould.not.exist(client.connection);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_INITED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "09f7529a-1abc-4651-a5a8-05757c9458df",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create common connect",
      "fullTitle": "Thrift Client Test Client create common connect",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "47f295d9-0c03-4b94-acfd-4e7c4c706c3b",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create http connect",
      "fullTitle": "Thrift Client Test Client create http connect",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nshould.exist(client.connection.nodeOptions);\nclient.connection.nodeOptions.host.should.be.equal(option.host);\nclient.connection.nodeOptions.port.should.be.equal(option.port);\nclient.connection.nodeOptions.path.should.be.equal(option.nodeOptions.path);\nclient.connection.nodeOptions.method.should.be.equal('POST');\nshould.exist(client.connection.nodeOptions.headers);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "efbf29a8-fb24-4ba3-a675-be83c1fb0607",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create ws connect",
      "fullTitle": "Thrift Client Test Client create ws connect",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.connection.path.should.be.equal(option.path);\nshould.exist(client.connection.wsOptions);\nclient.connection.wsOptions.host.should.be.equal(option.host);\nclient.connection.wsOptions.port.should.be.equal(option.port);\nclient.connection.wsOptions.path.should.be.equal(option.path);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "a4bd0aff-c168-45a1-883f-1f3444ff5663",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create service",
      "fullTitle": "Thrift Client Test Client create service",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.not.exist(client.services[serviceName]);\nvar service = client.getService(serviceName);\nshould.exist(service);\nshould.exist(client.services[serviceName]);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "b551ffab-e2d4-42f5-8a1b-4c7af3fdf096",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client common invoke add function",
      "fullTitle": "Thrift Client Test Client common invoke add function",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8833775f-4f58-4869-852a-ba86b502d80d",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client http invoke add function",
      "fullTitle": "Thrift Client Test Client http invoke add function",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2f335e13-56ff-4791-9325-b157941c8fe3",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client websocket invoke add function",
      "fullTitle": "Thrift Client Test Client websocket invoke add function",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "40e90652-910d-44e7-84b2-19cf6c81410c",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Server create",
      "fullTitle": "Thrift Server Test Server create",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar service_path = gen_path + serviceName + '.js';\nvar type_path = gen_path + typeName + '_types.js';\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nshould.exist(server);\nserver.port.should.equal(option.port);\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\nshould.not.exist(server.tls);\n\nserver.thrift_gen_path.should.be.equal(option.thrift_gen);\nserver.services_path[serviceName].should.be.equal(service_path);\nserver.types_path[typeName].should.be.equal(type_path);\nshould.exist(server.transport);\nshould.exist(server.protocol);\nshould.exist(server.processor);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "348306fa-9f6c-484f-b2f3-083743df6b91",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Register service",
      "fullTitle": "Thrift Server Test Register service",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(server.processor.services[serviceName]);\nshould.exist(server.processor.services[serviceName]._handler.add);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "aae85eb2-b8bb-47d7-a76c-e927972d644a",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server start",
      "fullTitle": "Thrift Server Test Server start",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\n\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\nshould.exist(server.server);\nshould.exist(server.server._handle);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "341f5833-419c-49a6-ba1d-3ef5448b0b58",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server close",
      "fullTitle": "Thrift Server Test Server close",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\nserver.close();\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\nshould.exist(server.server);\nshould.not.exist(server.server._handle);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "2b4ee02b-8174-4aff-96d7-25ade75e3809",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zcs = ZCommonServer.create();\n\t\tzcs.initZookeeper(zkOption);\n\t\tzcs.initConnection(serverOption);\n\t\tzcs.registerService(serviceName, {\n\t      add: function(num1, num2, cb){\n\t        return cb(null, num1+num2);\n\t      }\n\t    });\n\n\t    should.exist(zcs.services[serviceName].add);\n    zcs.start(function(){\n      getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n        should.not.exist(gnErr);\n        should.exist(data);\n        should.exist(state);\n        getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n          should.not.exist(gnErr2);\n          should.exist(data);\n          JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.COMMON);\n          should.exist(state);\n          return next();\n        })\n      });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3bff140-2ae7-4030-af50-cd7a3f9d29bc",
      "parentUUID": "e21b7f50-16f4-4663-9b48-b2aa3f58d0a0",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zhs = ZHttpServer.create();\nzhs.initZookeeper(zkOption);\nzhs.initConnection(serverOption);\nzhs.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zhs.services[serviceName].add);\nzhs.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.HTTP);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c13408e-cd97-463f-b3db-37c5625c9cdc",
      "parentUUID": "f5535875-f6cc-4497-b3eb-90f27bf25c9e",
      "skipped": false
    },
    {
      "title": "zookeeper client create",
      "fullTitle": "Zookeeper Client Test zookeeper client create",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nshould.exist(zk);\nzk.hosts.should.be.equal(options.hosts);\nzk.timeout.should.be.equal(options.timeout);\nzk.debug_level.should.be.equal(options.debug_level);\nshould.not.exist(zk.host_order);\nshould.not.exist(zk.isBuffer);\nshould.exist(zk.zk);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "7432e452-429b-4047-b6dd-e4ec80b6fb70",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add persistent node",
      "fullTitle": "Zookeeper Client Test zookeeper client add persistent node",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a3164c8-a2b8-4a7a-b26f-07d8fb6aa6f1",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add ephemeral node",
      "fullTitle": "Zookeeper Client Test zookeeper client add ephemeral node",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createEphemeralNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b09545d4-938d-49a3-b6f9-006ac7abb43e",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add child node",
      "fullTitle": "Zookeeper Client Test zookeeper client add child node",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tgetNodeChild_Protogenesis(options, nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t})\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d1238397-125d-445e-b2a4-44066fb6b1e1",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client get node value",
      "fullTitle": "Zookeeper Client Test zookeeper client get node value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gvErr, value, state){\n\t\tshould.not.exist(gvErr);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\treturn next();\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8fd12b6a-a6cf-43f2-9c1e-c5990e340883",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client get node child",
      "fullTitle": "Zookeeper Client Test zookeeper client get node child",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "92438032-0c26-4c1a-9961-0369c71cdacb",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client set node value",
      "fullTitle": "Zookeeper Client Test zookeeper client set node value",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, 1, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 2, state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tshould.exist(state2);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError2, v2){\n\t\t\t\tshould.not.exist(gnvError2);\n\t\t\t\tparseInt(v2).should.be.equal(2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f850b67c-3b18-44c6-9129-29c4b84eca63",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client remove node",
      "fullTitle": "Zookeeper Client Test zookeeper client remove node",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tzk.removeNode(nodePath, function(rnErr){\n\t\t\tshould.not.exist(rnErr);\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t})\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6f453683-1eed-44d7-96d9-07da1543ce84",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client exist node",
      "fullTitle": "Zookeeper Client Test zookeeper client exist node",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.existNode(nodePath, function(esErr, state){\n\t\tshould.not.exist(esErr);\n\t\tshould.exist(state);\n\t\treturn next();\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "801f6020-995c-4d58-bb16-290d72301580",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch node update twice",
      "fullTitle": "Zookeeper Client Test zookeeper client watch node update twice",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tvar times = 0;\n\tzk.on('set', function(updatePath){\n\t\tupdatePath.should.be.equal(nodePath);\n\t\ttimes++;\n\t\tif(times == 2) return next();\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\t\t\tshould.not.exist(gnvError);\n\t\t\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\t\t\tshould.not.exist(setError);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9d92ecc4-6dc5-4716-b638-fc45b17dbd3b",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch node delete",
      "fullTitle": "Zookeeper Client Test zookeeper client watch node delete",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tzk.on('delete', function(deletePath){\n\t\tdeletePath.should.be.equal(nodePath);\n\t\tzk.getNodeValue(nodePath, function(err){\n\t\t\terr.code.should.be.equal(-101);\n\t\t\treturn next();\n\t\t});\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.removeNode(nodePath, state1.version, function(delError){\n\t\t\tshould.not.exist(delError);\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3e901454-4165-4328-a7fa-b129497757f2",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch add child node",
      "fullTitle": "Zookeeper Client Test zookeeper client watch add child node",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addChildWatcher(nodePath);\n\tzk.on('child', function(updatePath){\n\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\tshould.not.exist(gncError);\n\t\t\tif(childrens.indexOf(child1) != -1) return next();\n\t\t});\n\t});\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "57d1926a-4b9b-47cb-ad15-b8913949506e",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "Server create",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server create",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tshould.exist(zs);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "f353f8a7-28e5-4805-a76b-66df80a19f29",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server init zookeeper",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init zookeeper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tshould.exist(zs.zookeeperOpts);\n\t\tshould.exist(zs.zookeeper);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "8e075d11-c5cd-444e-ba35-de9890329d68",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server init connection",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init connection",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\t\tshould.exist(zs.connectionOpts);\n\t\tshould.exist(zs.connection);\n\t\tshould.exist(zs.services);\n\t\tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "246e94f7-f2b2-47a5-8548-033a46fc1274",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server start",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server start",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \treturn next();\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "97ab8a98-ef7b-41cc-b91b-1b9635c46aeb",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server close",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server close",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \tzs.close();\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\n\t    \treturn next();\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "70a25fe1-ca3f-478b-bd1e-31daa0cac856",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zwss = ZWSServer.create();\nzwss.initZookeeper(zkOption);\nzwss.initConnection(serverOption);\nzwss.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zwss.services[serviceName].add);\nzwss.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.WEB_SOCKET);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "59d1594f-5805-4de3-b72c-1fce81832d6e",
      "parentUUID": "17c454bd-2bbf-4144-9a7c-8b2b3c9b631a",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Client create",
      "fullTitle": "Thrift Client Test Client create",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nshould.exist(client);\nclient.host.should.be.equal(option.host);\nclient.port.should.be.equal(option.port);\nshould.exist(client.opts);\nclient.thrift_gen_path.should.be.equal(option.thrift_gen);\nclient.services_path[serviceName].should.be.equal(service_path);\nclient.types_path[typeName].should.be.equal(type_path);\nshould.exist(client.transport);\nshould.exist(client.protocol);\nshould.exist(client.multiplexer);\nshould.exist(client.services);\nshould.not.exist(client.connection);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_INITED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "09f7529a-1abc-4651-a5a8-05757c9458df",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create common connect",
      "fullTitle": "Thrift Client Test Client create common connect",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "47f295d9-0c03-4b94-acfd-4e7c4c706c3b",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create http connect",
      "fullTitle": "Thrift Client Test Client create http connect",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nshould.exist(client.connection.nodeOptions);\nclient.connection.nodeOptions.host.should.be.equal(option.host);\nclient.connection.nodeOptions.port.should.be.equal(option.port);\nclient.connection.nodeOptions.path.should.be.equal(option.nodeOptions.path);\nclient.connection.nodeOptions.method.should.be.equal('POST');\nshould.exist(client.connection.nodeOptions.headers);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "efbf29a8-fb24-4ba3-a675-be83c1fb0607",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create ws connect",
      "fullTitle": "Thrift Client Test Client create ws connect",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nshould.exist(client.connection);\nclient.connection.host.should.be.equal(option.host);\nclient.connection.port.should.be.equal(option.port);\nclient.connection.path.should.be.equal(option.path);\nshould.exist(client.connection.wsOptions);\nclient.connection.wsOptions.host.should.be.equal(option.host);\nclient.connection.wsOptions.port.should.be.equal(option.port);\nclient.connection.wsOptions.path.should.be.equal(option.path);\nclient.state.should.be.equal(DDing_thrift.CLIENT_STATE.STATE_CONNECTED);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "a4bd0aff-c168-45a1-883f-1f3444ff5663",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client create service",
      "fullTitle": "Thrift Client Test Client create service",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nshould.not.exist(client.services[serviceName]);\nvar service = client.getService(serviceName);\nshould.exist(service);\nshould.exist(client.services[serviceName]);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "b551ffab-e2d4-42f5-8a1b-4c7af3fdf096",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client common invoke add function",
      "fullTitle": "Thrift Client Test Client common invoke add function",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: serverOption.port,\n  thrift_gen: gen_path\n};\nvar client = Client.create(option);\nclient.createConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8833775f-4f58-4869-852a-ba86b502d80d",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client http invoke add function",
      "fullTitle": "Thrift Client Test Client http invoke add function",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  nodeOptions: {\n    path: webOption.path\n  }\n};\nvar client = Client.create(option);\nclient.createHttpConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2f335e13-56ff-4791-9325-b157941c8fe3",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Client websocket invoke add function",
      "fullTitle": "Thrift Client Test Client websocket invoke add function",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var option = {\n  host: '127.0.0.1',\n  port: webOption.port,\n  thrift_gen: gen_path,\n  path: webOption.path\n};\nvar client = Client.create(option);\nclient.createWSConnect();\nvar service = client.getService(serviceName);\nvar num1 = 1,\n    num2 = 2;\nservice.add(num1, num2, function(error, result){\n  should.not.exist(error);\n  result.should.be.equal(num1+num2);\n  return next();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "40e90652-910d-44e7-84b2-19cf6c81410c",
      "parentUUID": "c39c2843-98cd-49fc-bc4f-237896cc533e",
      "skipped": false
    },
    {
      "title": "Server create",
      "fullTitle": "Thrift Server Test Server create",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar service_path = gen_path + serviceName + '.js';\nvar type_path = gen_path + typeName + '_types.js';\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nshould.exist(server);\nserver.port.should.equal(option.port);\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\nshould.not.exist(server.tls);\n\nserver.thrift_gen_path.should.be.equal(option.thrift_gen);\nserver.services_path[serviceName].should.be.equal(service_path);\nserver.types_path[typeName].should.be.equal(type_path);\nshould.exist(server.transport);\nshould.exist(server.protocol);\nshould.exist(server.processor);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "348306fa-9f6c-484f-b2f3-083743df6b91",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Register service",
      "fullTitle": "Thrift Server Test Register service",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(server.processor.services[serviceName]);\nshould.exist(server.processor.services[serviceName]._handler.add);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "aae85eb2-b8bb-47d7-a76c-e927972d644a",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server start",
      "fullTitle": "Thrift Server Test Server start",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\n\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\nshould.exist(server.server);\nshould.exist(server.server._handle);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "341f5833-419c-49a6-ba1d-3ef5448b0b58",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server close",
      "fullTitle": "Thrift Server Test Server close",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var gen_path = path.normalize(__dirname+'/'+'./gen-nodejs/');\nvar option = {\n  port: 3000,\n  thrift_gen: gen_path\n};\nserver = Server.create(option);\nserver.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nserver.start();\nserver.close();\nserver.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\nshould.exist(server.server);\nshould.not.exist(server.server._handle);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "2b4ee02b-8174-4aff-96d7-25ade75e3809",
      "parentUUID": "8f85238b-2d1e-4160-a8cb-1a0aa39e1813",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zcs = ZCommonServer.create();\n\t\tzcs.initZookeeper(zkOption);\n\t\tzcs.initConnection(serverOption);\n\t\tzcs.registerService(serviceName, {\n\t      add: function(num1, num2, cb){\n\t        return cb(null, num1+num2);\n\t      }\n\t    });\n\n\t    should.exist(zcs.services[serviceName].add);\n    zcs.start(function(){\n      getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n        should.not.exist(gnErr);\n        should.exist(data);\n        should.exist(state);\n        getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n          should.not.exist(gnErr2);\n          should.exist(data);\n          JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.COMMON);\n          should.exist(state);\n          return next();\n        })\n      });\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "d3bff140-2ae7-4030-af50-cd7a3f9d29bc",
      "parentUUID": "e21b7f50-16f4-4663-9b48-b2aa3f58d0a0",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zhs = ZHttpServer.create();\nzhs.initZookeeper(zkOption);\nzhs.initConnection(serverOption);\nzhs.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zhs.services[serviceName].add);\nzhs.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.HTTP);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c13408e-cd97-463f-b3db-37c5625c9cdc",
      "parentUUID": "f5535875-f6cc-4497-b3eb-90f27bf25c9e",
      "skipped": false
    },
    {
      "title": "zookeeper client create",
      "fullTitle": "Zookeeper Client Test zookeeper client create",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nshould.exist(zk);\nzk.hosts.should.be.equal(options.hosts);\nzk.timeout.should.be.equal(options.timeout);\nzk.debug_level.should.be.equal(options.debug_level);\nshould.not.exist(zk.host_order);\nshould.not.exist(zk.isBuffer);\nshould.exist(zk.zk);\nreturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "7432e452-429b-4047-b6dd-e4ec80b6fb70",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add persistent node",
      "fullTitle": "Zookeeper Client Test zookeeper client add persistent node",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a3164c8-a2b8-4a7a-b26f-07d8fb6aa6f1",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add ephemeral node",
      "fullTitle": "Zookeeper Client Test zookeeper client add ephemeral node",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createEphemeralNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tshould.not.exist(gnvErr);\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\tzk.close();\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b09545d4-938d-49a3-b6f9-006ac7abb43e",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client add child node",
      "fullTitle": "Zookeeper Client Test zookeeper client add child node",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tgetNodeChild_Protogenesis(options, nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t})\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d1238397-125d-445e-b2a4-44066fb6b1e1",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client get node value",
      "fullTitle": "Zookeeper Client Test zookeeper client get node value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gvErr, value, state){\n\t\tshould.not.exist(gvErr);\n\t\tgetNodeValue_Protogenesis(options, nodePath, function(gnvErr, zkValue){\n\t\t\tzkValue.toString().should.be.equal(value);\n\t\t\treturn next();\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8fd12b6a-a6cf-43f2-9c1e-c5990e340883",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client get node child",
      "fullTitle": "Zookeeper Client Test zookeeper client get node child",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t\tzk.createPersistentNode(nodePath+'/'+child2, value+':'+child2, function(c2Error, result){\n\t\t\tshould.not.exist(c2Error);\n\t\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\t\tshould.not.exist(gncError);\n\t\t\t\tchildrens.length.should.be.equal(2);\n\t\t\t\tchildrens.indexOf(child1).should.be.not.equal(-1);\n\t\t\t\tchildrens.indexOf(child2).should.be.not.equal(-1);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "92438032-0c26-4c1a-9961-0369c71cdacb",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client set node value",
      "fullTitle": "Zookeeper Client Test zookeeper client set node value",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, 1, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 2, state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tshould.exist(state2);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError2, v2){\n\t\t\t\tshould.not.exist(gnvError2);\n\t\t\t\tparseInt(v2).should.be.equal(2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f850b67c-3b18-44c6-9129-29c4b84eca63",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client remove node",
      "fullTitle": "Zookeeper Client Test zookeeper client remove node",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tresult.should.be.equal(nodePath);\n\texistNode_Protogenesis(options, nodePath, function(enError, state){\n\t\tshould.not.exist(enError);\n\t\tshould.exist(state);\n\t\tzk.removeNode(nodePath, function(rnErr){\n\t\t\tshould.not.exist(rnErr);\n\t\t\texistNode_Protogenesis(options, nodePath, function(enError2, state2){\n\t\t\t\tshould.not.exist(enError2);\n\t\t\t\tshould.not.exist(state2);\n\t\t\t\treturn next();\n\t\t\t});\n\t\t})\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6f453683-1eed-44d7-96d9-07da1543ce84",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client exist node",
      "fullTitle": "Zookeeper Client Test zookeeper client exist node",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.existNode(nodePath, function(esErr, state){\n\t\tshould.not.exist(esErr);\n\t\tshould.exist(state);\n\t\treturn next();\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "801f6020-995c-4d58-bb16-290d72301580",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch node update twice",
      "fullTitle": "Zookeeper Client Test zookeeper client watch node update twice",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tvar times = 0;\n\tzk.on('set', function(updatePath){\n\t\tupdatePath.should.be.equal(nodePath);\n\t\ttimes++;\n\t\tif(times == 2) return next();\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\tshould.not.exist(setError);\n\t\t\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\t\t\tshould.not.exist(gnvError);\n\t\t\t\tzk.setNodeValue(nodePath, 'Hello DDing', state1.version, function(setError, state2){\n\t\t\t\t\tshould.not.exist(setError);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9d92ecc4-6dc5-4716-b638-fc45b17dbd3b",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch node delete",
      "fullTitle": "Zookeeper Client Test zookeeper client watch node delete",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addWatcher(nodePath);\n\tzk.on('delete', function(deletePath){\n\t\tdeletePath.should.be.equal(nodePath);\n\t\tzk.getNodeValue(nodePath, function(err){\n\t\t\terr.code.should.be.equal(-101);\n\t\t\treturn next();\n\t\t});\n\t});\n\tzk.getNodeValue(nodePath, function(gnvError, v1, state1){\n\t\tshould.not.exist(gnvError);\n\t\tzk.removeNode(nodePath, state1.version, function(delError){\n\t\t\tshould.not.exist(delError);\n\t\t});\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3e901454-4165-4328-a7fa-b129497757f2",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "zookeeper client watch add child node",
      "fullTitle": "Zookeeper Client Test zookeeper client watch add child node",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var zk = ZookeeperClient.create(options);\nzk.createPersistentNode(nodePath, value, function(cpError, result){\n\tshould.not.exist(cpError);\n\tzk.addChildWatcher(nodePath);\n\tzk.on('child', function(updatePath){\n\t\tzk.getNodeChild(nodePath, function(gncError, childrens){\n\t\t\tshould.not.exist(gncError);\n\t\t\tif(childrens.indexOf(child1) != -1) return next();\n\t\t});\n\t});\n\tzk.createPersistentNode(nodePath+'/'+child1, value+':'+child1, function(c1Error, result){\n\t\tshould.not.exist(c1Error);\n\t});\n});",
      "err": {},
      "isRoot": false,
      "uuid": "57d1926a-4b9b-47cb-ad15-b8913949506e",
      "parentUUID": "5a48f38d-864a-4b6b-8a4d-297ac5a929bb",
      "skipped": false
    },
    {
      "title": "Server create",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server create",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tshould.exist(zs);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "f353f8a7-28e5-4805-a76b-66df80a19f29",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server init zookeeper",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init zookeeper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tshould.exist(zs.zookeeperOpts);\n\t\tshould.exist(zs.zookeeper);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "8e075d11-c5cd-444e-ba35-de9890329d68",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server init connection",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server init connection",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\t\tshould.exist(zs.connectionOpts);\n\t\tshould.exist(zs.connection);\n\t\tshould.exist(zs.services);\n\t\tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_INITED);\n\t\treturn next();",
      "err": {},
      "isRoot": false,
      "uuid": "246e94f7-f2b2-47a5-8548-033a46fc1274",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server start",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server start",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \treturn next();\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "97ab8a98-ef7b-41cc-b91b-1b9635c46aeb",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server close",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server close",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zs = new ZServer();\n\t\tzs.initZookeeper(zkOption);\n\t\tzs.initConnection(serverOption);\n\n\t    zs.start(function(){\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_STARTED);\n\t    \tzs.close();\n\t    \tzs.connection.state.should.equal(DDing_thrift.SERVER_STATE.STATE_CLOSED);\n\t    \treturn next();\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "70a25fe1-ca3f-478b-bd1e-31daa0cac856",
      "parentUUID": "dd1b5b34-635c-4b0b-9faf-fb0e9b2fc9da",
      "skipped": false
    },
    {
      "title": "Server register service",
      "fullTitle": "Thrift Server With Zookeeper In Common Connect Test Server register service",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "zwss = ZWSServer.create();\nzwss.initZookeeper(zkOption);\nzwss.initConnection(serverOption);\nzwss.registerService(serviceName, {\n  add: function(num1, num2, cb){\n    return cb(null, num1+num2);\n  }\n});\nshould.exist(zwss.services[serviceName].add);\nzwss.start(function(){\n  getNodeValue_Protogenesis(zkOption, zkServicePath, function(gnErr, data, state){\n    should.not.exist(gnErr);\n    should.exist(data);\n    should.exist(state);\n    getNodeValue_Protogenesis(zkOption, zkNodePath, function(gnErr2, data, state){\n      should.not.exist(gnErr2);\n      should.exist(data);\n      JSON.parse(data).connection_type.should.be.equal(DDing_thrift.CONNECTION_TYPE.WEB_SOCKET);\n      should.exist(state);\n      return next();\n    })\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "59d1594f-5805-4de3-b72c-1fce81832d6e",
      "parentUUID": "17c454bd-2bbf-4144-9a7c-8b2b3c9b631a",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}